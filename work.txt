Completed Work
-finish up writing and calling from system (done)
-read the code and add ways to change the parameter (done)
-test with five basic test_cases (done)
-read RCpp (use RCpp because saves work) with this tutorial http://adv-r.had.co.nz/Rcpp.html 
-write simple RCpp function
-write wrapper R function that calls RCpp function with data matrix passed in (and parameters)
-understand LINE better to figure out which parameters to take in
-write wrapper C function 
-read reconstruct
-write function in R that takes in string and two inputs
-wrote the function that takes in input and output/changed c++ code to accept vectors and not read/write into output files
-wrote function that takes in Rcpp as main line command
-understand how to write package in stat 133
-string function and debug 9:30
-write the same for all 3 other functions 12:00
-recheck all the functions and syntaxes
-exhaustively test inputs 3 and 4 with 1 0, 1 1000, 2 10, 2 100, 2 10000
-test net_youtube.txt
-summarize what went wrong
-with multithreading the results seem to be different. Also if I set the value rho to be zero everything is the same. 
-due to safety and time constraints I refuse to write the march=native compilation standards into the functions. That is why I test line without the march=native and testing compilations and it will all work. This is good because I don't need it to be a little faster for the sake of crashing 
-100% sure binary file just fread and fwrite integers
-definitely only works with binary
-order 2 binary 1 everything else vanilla
-travis.yml
-inputs are in binary, order, and test case #
-removed/changed the outputs within concatenate to be read from file as opposed to read from binary to assimilate to files
-may be floating point error but that doesn't matter, and more importantly is too hard to fix, and lastly shouldn't happen because everything is passed in as doubles. printf may lose precision but in real algorithm precision is not lost
-new algorithm is simple and cannot generate the binary format due to the fact that you do not have printing out functions. you can add that feature. 
-actually okay if binary output is different because it references the pointer of the binary value and so I don't really understand that but as long as the value is good it is all good 
-normalize is just summing up all elements and dividing.
-implemented normalize with the function that you add it as an option and can call your dataframe with it the only difference is that your function in Rscript adds a normalize function to test it. functionality exactly the same great. but your testing function just uses it and does some extra calculations. okay cool
-exactly how its supposed to be. 
-implemented tests
-implemented basic syntax checks and DRY's 
-need to remember to document that within the R cran package
-floating point errors

-need to test in 3 hours
-write testhat. and roxygen. 
-rpackge + continuous integration. 

tests are with ref_outputs
1) ask about how to test big outputs
2) ask about how to test without rho
3) ask about how to encode binary (rewrite the binary form don't test binary form)
4) figure out weird inputs like df == null and etc.
5) change to static all functions and compile (then add GSL at the end don't need to compile like caller.cpp)
6) ask about Rcpp exports and compile attributes (load all) and how to test efficiently

-read the program for line
-rewrite the function for reconstruct 30 min with replacing the printf and fprintf + initializing the functions
-debug the function for reconstruct 30 min and test on all inputs. at least 5 inputs. 
-write the function for R to rcpp and rcpp to main. 1 hour  
-test exhaustively 2 hours 1 hour reading + summarizing how to write rcpp function. 


-read the fread all 15 min
-write the C code 15 min
-finish the R code 15 min 
-buffer 15 min
-15 min testing 

-read the normalize 15 min
-write the C code 15 min 
-write teh R code 15 min
-15 min testing 
-30 min full testing. 


Week 8
5) test and package!
6) testing and packing is run devtools::load_all() and then check if everything works by writing commands. Then, running devtools::install()/build/rebuild = rebuilds everything. devtools::check() = math every code safe. Lastly, roxygen is good. testthat is good. Finally, write unit tests + keep proper documentation with proper export + import functions. 
1 write documentation roxygen 2 rebuild 3 write R function that calls the other functions 4 run that function after devtools::load_all() 5 write tests 6 package. 2 hours

-figure out input parameters/pass in as string
-figure out test cases and finalize

Future work
-write test generator or figure out how to generate words as vertexes
-write all the tests
-write testing framework using diff in either python or java
-test all the cases
-debug?

-learn how to write it as a package
-write it as a package

https://cran.rstudio.com/doc/contrib/Leisch-CreatingPackages.pdf
